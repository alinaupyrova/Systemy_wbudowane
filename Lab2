#include "xc.h"
#include "libpic30.h"
#include "adc.h"

#pragma config POSCMOD = XT
#pragma config OSCIOFNC = ON
#pragma config FCKSM = CSDCMD
#pragma config FNOSC = PRI
#pragma config IESO = ON
#pragma config WDTPS = PS32768
#pragma config FWPSA = PR128
#pragma config WINDIS = ON
#pragma config FWDTEN = ON
#pragma config ICS = PGx2
#pragma config GWRP = OFF
#pragma config GCP = OFF
#pragma config JTAGEN = OFF

uint8_t binary_to_gray(uint8_t num) {
    return num ^ (num >> 1);
}

uint8_t prog1_gray(uint8_t* counter) {
    return binary_to_gray(++(*counter));
}

uint8_t prog2_shift(uint8_t portValue, int* left) {
    if (portValue & 0x80) *left = 0;
    if (portValue & 0x01) *left = 1;
    return (*left) ? (portValue << 1) : (portValue >> 1);
}

int get_delay(unsigned int adc_val) {
    if (adc_val < 200) return 100000;
    if (adc_val < 400) return 200000;
    if (adc_val < 600) return 300000;
    if (adc_val < 800) return 400000;
    return 500000;
}

void init() {
    ADC_SetConfiguration(ADC_CONFIGURATION_DEFAULT);
    ADC_ChannelEnable(ADC_CHANNEL_POTENTIOMETER);

    TRISA = 0x0000;
    LATA = 0x00;
    
    TRISDbits.TRISD6 = 1;  // RB3
    TRISDbits.TRISD13 = 1; // RB4

    AD1PCFG = 0xFFFF;
}

int main(void) {
    init();
    unsigned char currentProgram = 0;
    unsigned char prevRB3 = 1, prevRB4 = 1;
    unsigned char counter = 0x00;
    unsigned char portValue = 0x01;
    int left = 1;

    while (1) {
        unsigned int adc_val = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
        if (adc_val == 0xFFFF) continue;
        int delay = get_delay(adc_val);


        unsigned char currRB3 = PORTDbits.RD6;
        unsigned char currRB4 = PORTDbits.RD13;

        if (prevRB3 == 1 && currRB3 == 0) {
            currentProgram = (currentProgram + 1) % 2;
            __delay32(300000);
        }

        if (prevRB4 == 1 && currRB4 == 0) {
            currentProgram = (currentProgram == 0) ? 1 : 0;
            __delay32(300000);
        }

        prevRB3 = currRB3;
        prevRB4 = currRB4;


        if (currentProgram == 0) {
            portValue = prog1_gray(&counter);
        } else {
            portValue = prog2_shift(portValue, &left);
        }

        LATA = portValue;
        __delay32(delay);
    }

    return 0;
}

