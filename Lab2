#include "xc.h"
#include "libpic30.h"
#include "adc.h"
#include "buttons.h"
#include <stdint.h>

#pragma config POSCMOD = XT
#pragma config OSCIOFNC = ON
#pragma config FCKSM = CSDCMD
#pragma config FNOSC = PRI
#pragma config IESO = ON
#pragma config WDTPS = PS32768
#pragma config FWPSA = PR128
#pragma config WINDIS = ON
#pragma config FWDTEN = ON
#pragma config ICS = PGx2
#pragma config GWRP = OFF
#pragma config GCP = OFF
#pragma config JTAGEN = OFF

uint8_t binary_to_gray(uint8_t num) {
    return num ^ (num >> 1);
}

uint8_t prog1_gray(uint8_t* counter) {
    (*counter)++;
    if (*counter > 255) *counter = 0;
    return binary_to_gray(*counter);
}

uint8_t prog2_snake(void) {
    static int pos = 0;
    static char dir = 1;
    uint8_t pattern = 0;

    for (int i = 0; i < 3; i++) {
        if ((pos + i) < 8) {
            pattern |= (1 << (pos + i));
        }
    }

    if (dir) {
        pos++;
        if (pos >= 5) dir = 0;
    } else {
        pos--;
        if (pos <= 0) dir = 1;
    }

    return pattern;
}

unsigned char read_speed_level(unsigned int adc_val) {
    return (adc_val / 200 > 4) ? 4 : adc_val / 200;
}

unsigned long get_delay_from_level(unsigned char level) {
    switch (level) {
        case 0: return 1250000;
        case 1: return 1000000;
        case 2: return 750000;
        case 3: return 500000;
        default: return 250000;
    }
}

void init(void) {
    TRISA = 0x0000;
    LATA = 0x00;
    TRISDbits.TRISD6 = 1;
    TRISDbits.TRISD13 = 1;
    AD1PCFG = 0xFFFF; // Все порты как цифровые
    ADC_SetConfiguration(ADC_CONFIGURATION_DEFAULT);
    ADC_ChannelEnable(ADC_CHANNEL_POTENTIOMETER);
}

int main(void) {
    init();

    uint8_t program = 0;
    uint8_t counter = 0x00;
    uint8_t portValue = 0x01;

    uint8_t prevRD6 = 1, prevRD13 = 1;

    while (1) {
        unsigned int adc_val = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
        if (adc_val == 0xFFFF) continue;

        unsigned char speed = read_speed_level(adc_val);
        unsigned long delay = get_delay_from_level(speed);

        uint8_t currRD6 = PORTDbits.RD6;
        uint8_t currRD13 = PORTDbits.RD13;

        if (prevRD6 == 1 && currRD6 == 0) {
            program = (program + 1) % 2;
            __delay32(300000);
            counter = 0;
            portValue = 0x01;
        }

        if (prevRD13 == 1 && currRD13 == 0) {
            program = (program == 0) ? 1 : 0;
            __delay32(300000);
            counter = 0;
            portValue = 0x01;
        }

        prevRD6 = currRD6;
        prevRD13 = currRD13;

        if (program == 0) {
            portValue = prog1_gray(&counter);
        } else {
            portValue = prog2_snake();
        }

        LATA = portValue;
        __delay32(delay);
    }

    return 0;
}
