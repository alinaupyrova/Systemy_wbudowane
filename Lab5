// PIC24FJ128GA010 Configuration Bit Settings
#pragma config POSCMOD = XT
#pragma config OSCIOFNC = ON
#pragma config FCKSM = CSDCMD
#pragma config FNOSC = PRI
#pragma config IESO = ON
#pragma config WDTPS = PS32768
#pragma config FWPSA = PR128
#pragma config WINDIS = ON
#pragma config FWDTEN = OFF
#pragma config ICS = PGx2
#pragma config GWRP = OFF
#pragma config GCP = OFF
#pragma config JTAGEN = OFF

#include <xc.h>
#include "lcd.h"
#include "buttons.h"
#include "adc.h"
#include "libpic30.h"
#include <stdint.h>
#include <stdbool.h>

#define FCY 4000000UL
#define BUTTON_P1 BUTTON_S5  // RB3 — gracz 1
#define BUTTON_P2 BUTTON_S6  // RB5 — gracz 2
#define BUTTON_OK BUTTON_S3  // dowolny przycisk OK

#define DOWN_ARROW 0

const uint8_t char_data_down_arrow[8] = {
    0b00100, 0b00100, 0b11111,
    0b01110, 0b00100, 0b00000,
    0b00000, 0b00000
};

void delay_ms(unsigned long ms) {
    __delay32((FCY / 1000) * ms);
}

void print_time(unsigned long ms, char* buffer) {
    unsigned int min = ms / 60000;
    unsigned int sec = (ms % 60000) / 1000;
    sprintf(buffer, "%02u:%02u", min, sec);
}

unsigned int choose_time_minutes() {
    unsigned int time = 3;
    while (1) {
        LCD_ClearScreen();
        LCD_PutString("Wybierz czas:", 13);
        LCD_PutChar('\n');

        unsigned int pot = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
        if (pot == 0xFFFF) continue;

        if (pot < 341) {
            time = 1;
            LCD_PutString("1 minuta", 8);
        } else if (pot < 682) {
            time = 3;
            LCD_PutString("3 minuty", 8);
        } else {
            time = 5;
            LCD_PutString("5 minut", 7);
        }

        delay_ms(500);
        if (BUTTON_IsPressed(BUTTON_OK)) break;
    }
    return time;
}

void countdown_sequence() {
    for (int i = 3; i > 0; i--) {
        LCD_ClearScreen();
        LCD_PutString("Start za ", 9);
        LCD_PutChar('0' + i);
        delay_ms(1000);
    }
}

void show_player_time(unsigned long p1, unsigned long p2, uint8_t current) {
    char time_buf[6];
    LCD_ClearScreen();

    if (current == 1) {
        LCD_PutChar(DOWN_ARROW);
        LCD_PutString("P1: ", 4);
        print_time(p1, time_buf);
        LCD_PutString(time_buf, 5);
        LCD_PutChar('\n');
        LCD_PutString(" P2: ", 5);
        print_time(p2, time_buf);
        LCD_PutString(time_buf, 5);
    } else {
        LCD_PutString(" P1: ", 5);
        print_time(p1, time_buf);
        LCD_PutString(time_buf, 5);
        LCD_PutChar('\n');
        LCD_PutChar(DOWN_ARROW);
        LCD_PutString("P2: ", 4);
        print_time(p2, time_buf);
        LCD_PutString(time_buf, 5);
    }
}

void show_winner(uint8_t loser) {
    LCD_ClearScreen();

    if (loser == 1) {
        LCD_PutString("Gracz 1 -> czas!", 17);
    } else {
        LCD_PutString("Gracz 2 -> czas!", 17);
    }

    LCD_PutChar('\n');
    LCD_PutString("Koniec gry", 10);

    while (1);
}

int main(void) {
    LCD_Initialize();
    LCD_ClearScreen();

    LCD_CreateChar(DOWN_ARROW, char_data_down_arrow);

    BUTTON_Enable(BUTTON_P1);
    BUTTON_Enable(BUTTON_P2);
    BUTTON_Enable(BUTTON_OK);

    ADC_SetConfiguration(ADC_CONFIGURATION_DEFAULT);
    ADC_ChannelEnable(ADC_CHANNEL_POTENTIOMETER);

    TRISA = 0x0000;

    LCD_PutString(" Zegar Szachowy", 16);
    delay_ms(1500);

    unsigned int start_time_min = choose_time_minutes();
    countdown_sequence();

    unsigned long player1_time = start_time_min * 60000;
    unsigned long player2_time = start_time_min * 60000;

    uint8_t current_player = 1;

    LCD_ClearScreen();
    LCD_PutString("Nacisnij P1 aby", 15);
    LCD_PutChar('\n');
    LCD_PutString("rozpoczac gre", 14);

    while (!BUTTON_IsPressed(BUTTON_P1)) {
        delay_ms(100);
    }

    while (1) {
        if (BUTTON_IsPressed(BUTTON_P1)) {
            current_player = 2;
        } else if (BUTTON_IsPressed(BUTTON_P2)) {
            current_player = 1;
        }

        show_player_time(player1_time, player2_time, current_player);
        delay_ms(1000);

        if (current_player == 1 && player1_time > 0) {
            player1_time -= 1000;
        } else if (current_player == 2 && player2_time > 0) {
            player2_time -= 1000;
        }

        if (player1_time == 0) {
            show_winner(1);
        }

        if (player2_time == 0) {
            show_winner(2);
        }
    }

    return 0;
}
