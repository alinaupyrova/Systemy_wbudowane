#include "xc.h"
#include "buttons.h"
#include "lcd.h"
#include <stdlib.h>
#include <string.h>

#pragma config POSCMOD = XT
#pragma config OSCIOFNC = ON
#pragma config FCKSM = CSDCMD
#pragma config FNOSC = PRI
#pragma config IESO = ON
#pragma config WDTPS = PS32768
#pragma config FWPSA = PR128
#pragma config WINDIS = ON
#pragma config FWDTEN = ON
#pragma config ICS = PGx2
#pragma config GWRP = OFF
#pragma config GCP = OFF
#pragma config JTAGEN = OFF

#define DEBOUNCE_DELAY 1000000

void system_init(void);
void display_start_screen(void);
void flashLEDs(void);
void displayText(void);
void updateProgramState(uint8_t* portValue, uint8_t* counter, uint8_t* queue, int program);

uint8_t prog1_count_up(uint8_t counter);
uint8_t prog2_count_down(uint8_t counter);
uint8_t prog3_gray_up(uint8_t counter);
uint8_t prog4_gray_down(uint8_t counter);
uint8_t prog5_bcd_up(uint8_t counter);
uint8_t prog6_bcd_down(uint8_t counter);
uint8_t prog7_shift_lr(uint8_t portValue, int* left);
uint8_t prog8_queue_logic(uint8_t* counter, uint8_t* queue);
uint8_t prog9_random();

void system_init(void) {
    TRISA = 0x0000;
    TRISD = 0xFFFF;
    AD1PCFG = 0xFFFF;
    srand(1110011);
    LCD_Initialize();
    BUTTON_Enable(BUTTON_S3);
    BUTTON_Enable(BUTTON_S4);
    BUTTON_Enable(BUTTON_S5);
    BUTTON_Enable(BUTTON_S6);
}

void display_start_screen(void) {
    LCD_ClearScreen();
    LCD_PutString("DZIEN DOBRY", 11);
    LCD_PutChar('\n');
    LCD_PutString("EKRAN LCD", 9);
}

void flashLEDs(void) {
    LATA = 0xFFFF;
    __delay32(5000000);
    LATA = 0x0000;
}

void displayText(void) {
    const char* dni[] = {"czwartek", "srioda"};
    int dzienIndex = 0;
    
    LCD_ClearScreen();
    LCD_PutString("Wybierz dzien", 13);
    LCD_PutChar('\n');
    LCD_PutString("dzien:", 7);
    LCD_PutString(dni[dzienIndex], strlen(dni[dzienIndex]));
    
    __delay32(1000000);

    while (1) {
        if (BUTTON_IsPressed(BUTTON_S5)) {
            break;
        }
        if (BUTTON_IsPressed(BUTTON_S4)) {
            dzienIndex = (dzienIndex + 1) % 2;
            LCD_ClearScreen();
            LCD_PutString("Wybierz dzien", 13);
            LCD_PutChar('\n');
            LCD_PutString("dzien:", 7);
            LCD_PutString(dni[dzienIndex], strlen(dni[dzienIndex]));
            __delay32(400000);
        }
        if (BUTTON_IsPressed(BUTTON_S6)) {
            LCD_ClearScreen();
            LCD_PutString("Wybrano: ", 9);
            LCD_PutString(dni[dzienIndex], strlen(dni[dzienIndex]));
            flashLEDs();
            __delay32(5000000);
        }
        if (BUTTON_IsPressed(BUTTON_S3)) {
            LATA = 0x0000;
            LCD_ClearScreen();
            LCD_PutString("Wyjscie", 7);
            __delay32(1000000);
            return;
        }
    }
}

void updateProgramState(uint8_t* portValue, uint8_t* counter, uint8_t* queue, int program) {
    if (program == 7) {
        *portValue = 0x07;
    } else if (program == 8) {
        *portValue = 0x01;
        *counter = 0x01;
    } else {
        *portValue = 0x00;
        *counter = 0x00;
    }
    *queue = 0x80;
}

uint8_t prog1_count_up(uint8_t counter) {
    return ++counter;
}

uint8_t prog2_count_down(uint8_t counter) {
    return --counter;
}

uint8_t prog3_gray_up(uint8_t counter) {
    return counter ^ (counter >> 1);
}

uint8_t prog4_gray_down(uint8_t counter) {
    return (counter - 1) ^ ((counter - 1) >> 1);
}

uint8_t prog5_bcd_up(uint8_t counter) {
    return ((++counter / 10) << 4) | (counter % 10);
}

uint8_t prog6_bcd_down(uint8_t counter) {
    return ((--counter / 10) << 4) | (counter % 10);
}

uint8_t prog7_shift_lr(uint8_t portValue, int* left) {
    if (portValue & 0x80) *left = 0;
    if (portValue & 0x01) *left = 1;
    return (*left) ? (portValue << 1) : (portValue >> 1);
}

uint8_t prog8_queue_logic(uint8_t* counter, uint8_t* queue) {
    if (*queue & 0x01)
        *queue = 0x80;
    else if (*counter & *queue) {
        *counter = 0x01;
        *queue |= (*queue >> 1);
    } else {
        *counter <<= 1;
    }
    return ((*queue << 1) | *counter);
}

uint8_t prog9_random() {
    return rand() % 0x40;
}

int main(void) {
    uint8_t portValue = 0x00, counter = 0x00, queue = 0x80;
    int program = 1, left = 1;

    system_init();

    while (1) {
        LATA = portValue;

        switch (program) {
            case 1: portValue = prog1_count_up(counter); break;
            case 2: portValue = prog2_count_down(counter); break;
            case 3: portValue = prog3_gray_up(counter); break;
            case 4: portValue = prog4_gray_down(counter); break;
            case 5: portValue = prog5_bcd_up(counter); break;
            case 6: portValue = prog6_bcd_down(counter); break;
            case 7: portValue = prog7_shift_lr(portValue, &left); break;
            case 8: portValue = prog8_queue_logic(&counter, &queue); break;
            case 9: portValue = prog9_random(); break;
        }

        updateProgramState(&portValue, &counter, &queue, program);

        if (BUTTON_IsPressed(BUTTON_S6)) {
            program = (program % 9) + 1;
            __delay32(DEBOUNCE_DELAY);
        }
        if (BUTTON_IsPressed(BUTTON_S5)) {
            break;
        }
    }

    return 0;
}
