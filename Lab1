// PIC24FJ128GA010 Configuration Bit Settings
// CONFIG2
#pragma config POSCMOD = XT
#pragma config OSCIOFNC = ON
#pragma config FCKSM = CSDCMD
#pragma config FNOSC = PRI
#pragma config IESO = ON
// CONFIG1
#pragma config WDTPS = PS32768
#pragma config FWPSA = PR128
#pragma config WINDIS = ON
#pragma config FWDTEN = ON
#pragma config ICS = PGx2
#pragma config GWRP = OFF
#pragma config GCP = OFF
#pragma config JTAGEN = OFF

#include "xc.h"
#include "libpic30.h"
#include "buttons.h"
#include <stdlib.h>
#include <stdint.h>

uint8_t binary_to_gray(uint8_t num) {
    return num ^ (num >> 1);
}

uint8_t prog_logic(uint8_t program, uint8_t portValue, uint8_t* counter, uint8_t* queue, int* left) {
    switch (program) {
        case 1: return ++(*counter);
        case 2: return --(*counter);
        case 3: return binary_to_gray(++(*counter));
        case 4: return binary_to_gray(--(*counter));
        case 5: return (((++(*counter)) / 10) << 4) | ((*counter) % 10);
        case 6: return (((--(*counter)) / 10) << 4) | ((*counter) % 10);
        case 7: {
            static int pos = 0;
            static char dir = 1;
            uint8_t pattern = 0;

            for (int i = 0; i < 3; i++) {
                if ((pos + i) < 8) {
                    pattern |= (1 << (pos + i));
                }
            }

            if (dir) {
                pos++;
                if (pos >= 5) dir = 0;
            } else {
                pos--;
                if (pos <= 0) dir = 1;
            }

            return pattern;
        }
        case 8:
            if (*queue & 0x01)
                *queue = 0x80;
            else if (*counter & *queue) {
                *counter = 0x01;
                *queue |= (*queue >> 1);
            } else {
                *counter <<= 1;
            }
            return ((*queue << 1) | *counter);
        case 9: return rand() % 0x40;
    }
    return portValue;
}

void change_program(int* program, int dir, uint8_t* portValue, uint8_t* counter, uint8_t* queue) {
    *program += dir;
    if (*program > 9) *program = 1;
    if (*program < 1) *program = 9;

    *queue = 0x80;
    if (*program == 7) {
        *portValue = 0x07;
    } else if (*program == 8) {
        *portValue = 0x01;
        *counter = 0x01;
    } else {
        *portValue = 0x00;
        *counter = 0x00;
    }
}

int main(void) {
    uint8_t portValue = 0x00, counter = 0x00, queue = 0x80;
    char current6 = 0, prev6 = 0;
    char current13 = 0, prev13 = 0;
    int program = 1, left = 1;

    TRISA = 0x0000;
    TRISD = 0xFFFF;
    AD1PCFG = 0xFFFF;
    srand(1110011);

    while (1) {
        LATA = portValue;
        portValue = prog_logic(program, portValue, &counter, &queue, &left);

        prev6 = PORTDbits.RD6;
        prev13 = PORTDbits.RD13;
        __delay32(1000000);
        current6 = PORTDbits.RD6;
        current13 = PORTDbits.RD13;

        if (prev6 == 1 && current6 == 0)
            change_program(&program, 1, &portValue, &counter, &queue);

        if (prev13 == 1 && current13 == 0)
            change_program(&program, -1, &portValue, &counter, &queue);
    }

    return 0;
}
